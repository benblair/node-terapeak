#!/usr/bin/env node

var fs = require('fs');
var _ = require('underscore');
var program = require('commander');
var Terapeak = require('../');
var docs = require('../api.json');

// program options

program
    .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
    .option('-c, --category <categoryid>', 'search by specific categoryid', parseInt)
    .option('-q, --query <keyword>', 'search by keyword or phrase')
    .option('-k, --key <api_key>', 'api key, or use environment variable TERAPEAK_KEY')
    .option('-r, --restricted', 'use restricted api endpoint, or use environment variable TERAPEAK_RESTRICTED')
    .usage('method [options]');

if (process.env.TERAPEAK_RESTRICTED) {
    program.restricted = true;
}

_.each(docs.methods, function(method) {

    var apiMethodName = method.name[0].toLowerCase() + method.name.slice(1);
    var apiMethod = Terapeak.prototype[apiMethodName];

    program
        .command(method.name)
        .on('--help', function() {
            var docRoot = method.restricted ? docs.documentation.restrictedRoot : docs.documentation.researchRoot;
            console.log('  ' + method.description);
            console.log('  See ' + docRoot + method.name);
            
            if(!apiMethod) {
                console.log('  !! NOT YET IMPLEMENTED !!');
            }

            // TODO: Load and render some of the help page into the console
        })
        //.description(method.description.slice(0,77) + '...')
        .action(function(options) {

            if (!apiMethod) {
                console.log('\n  Terapeak API method ' + method.name + ' has not yet been implemented by this module. Sorry!\n');
                return;
            }

            var apiKey = program.api_key || process.env.TERAPEAK_KEY;
            if (!apiKey) {
                console.log('\n  Must specify Terapeak API key with --key option or environment variable TERAPEAK_KEY.\n');
                return;
            }

            var options = {};

            if (program.query) {
                options.SearchQuery = {
                    Keywords: program.query
                };
                if (program.category) {
                    options.SearchQuery.CategoryLimit = [
                        {
                            CategoryID: program.category
                        }
                    ];
                }
            } else if (program.category) {
                options.CategoryQuery = {
                    Categories: [
                        {
                            CategoryID: program.category
                        }
                    ]
                };
            }

            debugger;
            var terapeak = new Terapeak(apiKey, program.restricted);

            apiMethod.call(terapeak, options, function(err, result, meta) {
                if (err) {
                    console.log('Error: ' + err);
                    return;
                }
                console.log(JSON.stringify(result, null, 4));
            });
        });
});

program.parse(process.argv);